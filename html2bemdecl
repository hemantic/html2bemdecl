#!/usr/bin/env node

var fs 		= require('fs'),
	jsdom 	= require('jsdom'),
	program = require('commander');

program
	.version('0.0.1')
	.usage('[options]')
	.option('-i, --input <filename>', 'Input HTML file')
	.option('-o, --output <filename>', 'Output BEMDECL')
	.option('-enc, --encoding', 'Input file encoding [encoding]', 'utf8')
	.parse(process.argv);

fs.readFile(program.input, program.encoding, function (err, data) {
	if (err) throw err;
	
	jsdom.env({
		html: data,
		scripts: [
			'http://org11.timepad.local/templates_subdomain/js/lib/jquery-1.7.2.min.js?v=339'
		]
	}, function (err, window) {
		var $ = window.jQuery;
		var classes = [];
		
		// Getting all class names from document
		$("*").each(function(){
			if (className = $(this).attr('class')) {
				classes = classes.concat(className.split(" "));
			}
		});
		
		classes = classes.unique().sort();
		
		// Getting only block names
		blocks = [];
		
		classes.forEach(function(item){
			if (blockName = item.match(/[bli]-[a-z]+$/)) {
				elemsRegExp = new RegExp(blockName + "__([a-z]+)$");
				modsRegExp = new RegExp(blockName + "_([a-z]+)_([a-z]+)$");
				
				elems = [];
				mods = [];
				
				classes.forEach(function(item){
					// Getting all elements for given block
					if (elemName = item.match(elemsRegExp)) {
						ElemModsRegExp = new RegExp(blockName + "__" + elemName + "_([a-z]+)_([a-z]+)$");
						elemMods = [];
						classes.forEach(function(item){
							if (elemModName = item.match(ElemModsRegExp)) {
								elemMods.push({
									name: modName[1],
									vals:  [modName[2]]
								});
							}
						});
						
						elems.push({
							name: elemName[1],
							mods: elemMods
						});
					}
					
					// Getting all mods for given block
					if (modName = item.match(modsRegExp)) {
						mods.push({
							name: modName[1],
							vals:  [modName[2]]
						});
					}
				});

				blocks.push({
					name: item,
					mods: mods,
					elems: elems
				});
			}
		});
		
		fs.writeFile(program.output, "exports.blocks = " + JSON.stringify(blocks), function (err) {
		  if (err) throw err;
		  console.log(program.output + " saved");
		});
	});
});

Array.prototype.unique = function(){
	var r = new Array();
	o:for(var i = 0; i < this.length; i++) {
		for(var x = 0; x < r.length; x++) {
			if(r[x]==this[i]) {
				continue o;	
			}
		}
		r[r.length] = this[i];
	}
	return r;
};